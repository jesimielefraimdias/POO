   main: Quando executamos o main conseguimos entender como os objetos são criados no construtor e como são destruídos, podemos ver claramente, que a ordem do destrutor no vetor é inversa ao do construtor quando a alocação é um vetor. 
Fica evidente, também, de sermos extremamente cuidadosos na semântica quando estamos desalocando memória, pois como mostrado no exemplo, se esquecermos de colocar “[ ]” iremos ter um erro.
          main2: O modo como é criado o objeto p é um pouco diferente, pois é um vetor de ponteiros e cada elemento tem um espaço de memória alocado que é diferente do exemplo que estava no main, pois nele o objeto apontava para um espaço de memória que já era o vetor, diante dessa diferença, tanto o construtor quanto o destrutor chegará em ordem de chegada, e o destrutor não fará a ordem inversa, pois os espaços de memória dos outros não tem nenhuma relação já que foram alocados um a um.
         Por último, temos o objeto p2 que é um ponteiro de ponteiro (que é basicamente o que fizemos no exercício 3), basicamente, temos de alocar um ponteiro para p2 que nesse caso foi um vetor de ponteiros e depois um espaço de memória para cada elemento do vetor, seguindo o mesmo exemplo do objeto p1, como os espaços de memória alocados um a um ao vetor de ponteiros não estão associados, a ordem do construtor e destrutor serão a de chegada.

